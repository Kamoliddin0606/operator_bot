from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command  
from aiogram.dispatcher.filters.state import State
from keyboards.default.menuReports import menuReports
from keyboards.default.menuKeyboard import menu
import zeep
from datetime import datetime

from loader import dp
from states.reportFromSalesRepresentativeStates import reportSR

@dp.message_handler(text='üìä Send a report')
async def startGettingReport(message: types.Message):
    reasionsReturn = 'http://kit.gloriya.uz:5443/EVYAP_UT/EVYAP_UT.1cws?wsdl'
    client = zeep.Client(wsdl=reasionsReturn)
    try:
        user = client.service.GetUserByTelegramID(message.from_user.id)
    except:
        user = None
    
    if user:
        await message.reply("<b>üìà –£–≤–∞–∂–∞–µ–º—ã–π "+message.from_user.full_name+', –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ—Ç—á–µ—Ç–∞!!!</b> \n\n  ‚ÄºÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç \n\n <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</b>',reply_markup=menuReports)
        await reportSR.territory.set()
    else:
        # await message.reply_photo(photo="https://drive.google.com/file/d/1sa7LwhCITfX9CRpyYh6ZnMm1ixRgJxah/view?usp=sharing", caption='test')
        await message.reply("‚ÄºÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: \n\n 1Ô∏è‚É£ –í—ã –Ω–µ —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å \n\n 2Ô∏è‚É£ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ")
# previous

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.territory)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()


@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.totalClientTerritory)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("<b>üìà –£–≤–∞–∂–∞–µ–º—ã–π "+message.from_user.full_name+', –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –æ—Ç—á–µ—Ç–∞!!!</b> \n\n  ‚ÄºÔ∏è –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç \n\n <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):</b>',reply_markup=menuReports)
    await reportSR.territory.set()

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.activeClients)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>–û–ö–ë –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏:</b>")
    await reportSR.totalClientTerritory.set()

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.transfer)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>–ê–ë–ö —Å—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ:</b>")
    await reportSR.activeClients.set()

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.cash)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º UZS):</b>")
    await reportSR.transfer.set()

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.hardSoap)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ª–æ–º UZS):</b>")
    await reportSR.cash.set()


@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.softSoap)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>–¢–≤–µ—Ä–¥–æ–µ –º—ã–ª–æ (–ê–ö–ë):</b>")
    await reportSR.hardSoap.set()

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.evyBaby)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>–ñ–∏–¥–∫–æ–µ –º—ã–ª–æ (–ê–ö–ë):</b>")
    await reportSR.softSoap.set()

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.babyOne)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>EVY BABY (–ê–ö–ë):</b>")
    await reportSR.evyBaby.set()

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.arko)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>BABY ONE (–ê–ö–ë):</b>")
    await reportSR.babyOne.set()
@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.deoEmotion)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>ARKO (–ê–ö–ë):</b>")
    await reportSR.arko.set()

@dp.message_handler(text='‚¨ÖÔ∏è previous', state = reportSR.deoBlade)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.answer("<b>DEO EMOTION (–ê–ö–ë):</b>")
    await reportSR.deoEmotion.set()

# previous
# cencel

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.territory)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()


@dp.message_handler(text='‚ùå Cancel report', state = reportSR.totalClientTerritory)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.activeClients)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.transfer)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.cash)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.hardSoap)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()


@dp.message_handler(text='‚ùå Cancel report', state = reportSR.softSoap)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.evyBaby)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.babyOne)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.arko)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()
@dp.message_handler(text='‚ùå Cancel report', state = reportSR.deoEmotion)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

@dp.message_handler(text='‚ùå Cancel report', state = reportSR.deoBlade)
async def cencelReport(message: types.Message, state:FSMContext):
    await message.reply("–û—Ç—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu)
    await state.finish()

# cencel

@dp.message_handler(state = reportSR.territory)
async def answer_territory(message:types.Message, state:FSMContext):
    territory = message.text
    await state.update_data(
        {'territory': territory}
        )   
    
    await message.answer("<b>–û–ö–ë –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏:</b>")
    await reportSR.next()
    

@dp.message_handler(state = reportSR.totalClientTerritory)
async def answer_totalClient(message:types.Message, state:FSMContext):
    totalClientTerritory = message.text
    if str(totalClientTerritory).isnumeric():

        await state.update_data(
            {'totalClientTerritory': totalClientTerritory}
            )   
        
        await message.answer("<b>–ê–ë–ö —Å—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ:</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+totalClientTerritory+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")

@dp.message_handler(state = reportSR.activeClients)
async def answer_activeClient(message:types.Message, state:FSMContext):
    activeClient = message.text
    if str(activeClient).isnumeric():

        await state.update_data(
            {'activeClient': activeClient}
            )   
        
        await message.answer("<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º UZS):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+activeClient+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")

@dp.message_handler(state = reportSR.transfer)
async def answer_transfer(message:types.Message, state:FSMContext):
    transfer = message.text
    if str(transfer).isnumeric():

        await state.update_data(
            {'transfer': transfer}
            )   
        
        await message.answer("<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ (–Ω–∞–ª–æ–º UZS):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+transfer+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")


@dp.message_handler(state = reportSR.cash)
async def answer_transfer(message:types.Message, state:FSMContext):
    cash = message.text
    if str(cash).isnumeric():

        await state.update_data(
            {'cash': cash}
            )   
        
        await message.answer("<b>–¢–≤–µ—Ä–¥–æ–µ –º—ã–ª–æ (–ê–ö–ë):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+cash+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")


@dp.message_handler(state = reportSR.hardSoap)
async def answer_transfer(message:types.Message, state:FSMContext):
    hardSoap = message.text
    if str(hardSoap).isnumeric():

        await state.update_data(
            {'hardSoap': hardSoap}
            )   
        
        await message.answer("<b>–ñ–∏–¥–∫–æ–µ –º—ã–ª–æ (–ê–ö–ë):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+hardSoap+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")

@dp.message_handler(state = reportSR.softSoap)
async def answer_transfer(message:types.Message, state:FSMContext):
    softSoap = message.text
    if str(softSoap).isnumeric():

        await state.update_data(
            {'softSoap': softSoap}
            )   
        
        await message.answer("<b>EVY BABY (–ê–ö–ë):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+softSoap+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")

@dp.message_handler(state = reportSR.evyBaby)
async def answer_transfer(message:types.Message, state:FSMContext):
    evyBaby = message.text
    if str(evyBaby).isnumeric():

        await state.update_data(
            {'evyBaby': evyBaby}
            )   
        
        await message.answer("<b>BABY ONE (–ê–ö–ë):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+evyBaby+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")


@dp.message_handler(state = reportSR.babyOne)
async def answer_transfer(message:types.Message, state:FSMContext):
    babyOne = message.text
    if str(babyOne).isnumeric():

        await state.update_data(
            {'babyOne': babyOne}
            )   
        
        await message.answer("<b>ARKO (–ê–ö–ë):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+babyOne+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")

@dp.message_handler(state = reportSR.arko)
async def answer_transfer(message:types.Message, state:FSMContext):
    arko = message.text
    if str(arko).isnumeric():

        await state.update_data(
            {'arko': arko}
            )   
        
        await message.answer("<b>DEO EMOTION (–ê–ö–ë):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+arko+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")


@dp.message_handler(state = reportSR.deoEmotion)
async def answer_transfer(message:types.Message, state:FSMContext):
    deoEmotion = message.text
    if str(deoEmotion).isnumeric():

        await state.update_data(
            {'deoEmotion': deoEmotion}
            )   
        
        await message.answer("<b>DEO BLADE (–ê–ö–ë):</b>")
        await reportSR.next()
    else:
        await message.reply("‚ùå <i>"+deoEmotion+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")
@dp.message_handler(state = reportSR.deoBlade)
async def answer_transfer(message:types.Message, state:FSMContext):
    deoBlade = message.text
    # name = None
    # totalPlan = None
    # totalFact = None
    # totalPercent = None
    # totalForecast = None
    # totalpercentForecast = None

    # okb = None
    # akbplan = None
    # akbfact = None
    # akbpercent = None
    if str(deoBlade).isnumeric():
        reasionsReturn = 'http://kit.gloriya.uz:5443/EVYAP_UT/EVYAP_UT.1cws?wsdl'
        client = zeep.Client(wsdl=reasionsReturn)
        
            
        telegramuser = client.service.GetUserByTelegramID(message.from_user.id)
        
        name  = telegramuser["Name"]
        
        userCode = telegramuser['Code']

        kpi = client.service.GetKPI(userCode)
        totalPlan = kpi["TotalPlan"]
        totalFact = kpi["TotalFact"]
        totalPercent = kpi["TotalPercent"]
        totalForecast = kpi["TotalForecast"]
        totalpercentForecast = kpi["TotalPercentForecastFact"]

        okb = kpi["OKB"]
        akbplan = kpi["AKBPlan"]
        akbfact = kpi["AKBFact"]
        akbpercent = kpi["AKBPercent"]
       
        await state.update_data(
            {'deoBlade': deoBlade}
            )   
        
        
        
        data = await state.get_data()
        territory = data.get("territory")
        totalClientTerritory = data.get("totalClientTerritory")
        activeClient = data.get("activeClient")
        transfer = data.get("transfer")
        cash = data.get("cash")
        hardSoap = data.get("hardSoap")
        softSoap = data.get("softSoap")
        evyBaby = data.get("evyBaby")
        babyOne = data.get("babyOne")
        arko = data.get("arko")
        deoEmotion = data.get("deoEmotion")
        deoBlade = data.get("deoBlade")

        answer =f"""
#dailyReport
üìÖ –î–∞—Ç–∞: {str(datetime.now().day)+'-'+str(datetime.now().month)+"-"+str(datetime.now().year)+"  "+str(datetime.now().hour)+':'+ str(datetime.now().minute)+':'+str(int(datetime.now().second))}
üôéüèª‚Äç‚ôÇÔ∏è –§–ò–û: {name}

<b>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è</b> : <i>{territory}</i> 

<i>–û–ö–ë –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ -- {totalClientTerritory} —Ç.—Ç.</i>
<i>–ê–ë–ö —Å—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ       -- {activeClient} —Ç.—Ç.</i>

<b>–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å—É–º–º—É:</b>

<i>–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º -- {transfer} UZS</i> 
<i>–ù–∞–ª–æ–º              -- {cash} UZS</i>
<i>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –∑–∞ –¥–µ–Ω—å -- {float(transfer)+float(cash)} UZS</i>

<b>–ê–ö–ë –∑–∞ –¥–µ–Ω—å</b>:

<i>–¢–≤–µ—Ä–¥–æ–µ –ú—ã–ª–æ -- {hardSoap} —Ç.—Ç.</i>
<i>–ñ–∏–¥–∫–æ–µ –º—ã–ª–æ  -- {softSoap} —Ç.—Ç. </i>

<b>–ü–æ–¥–≥—É–∑–Ω–∏–∫–∏</b>:

<i>EVY BABY        -- {evyBaby} —Ç.—Ç</i>
<i>B–êBY ONE       --¬†{babyOne} —Ç.—Ç.</i>
<i>ARKO              --¬†{arko} —Ç.—Ç.</i>
<i>DEO EMOTION --¬†{deoEmotion} —Ç.—Ç.</i>
<i>DEO BLADE     --¬†{deoBlade} —Ç.—Ç.</i>

‚úø‚Ä¢‚îà‚îà‚îà‚îà‚Ä¢‚Ä¢‡ß°‚ùÄ‡ß°‚Ä¢‚îà‚îà‚îà‚îà‚Ä¢‚úø

üìä <b>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω –∏ –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ {str(datetime.now().day)+'-'+str(datetime.now().month)+"-"+str(datetime.now().year)+"  "+str(datetime.now().hour)+':'+ str(datetime.now().minute)+':'+str(int(datetime.now().second))}</b>

<b>–ü–ª–∞–Ω –∏ —Ñ–∞–∫—Ç:</b>

<i>–ü–ª–∞–Ω                -- {totalPlan}</i>
<i>–§–∞–∫—Ç                -- {totalFact}</i>
<i>–§–∞–∫—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö    -- {totalPercent}%</i>
<i>–ü—Ä–æ–≥–Ω–æ–∑             -- {totalForecast}</i>
<i>–ü—Ä–æ–≥–Ω–æ–∑ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö -- {totalpercentForecast}%</i>

<b>–û–ö–ë –∏ –ê–ö–ë:</b>

<i>–û–ö–ë             -- {okb}</i>
<i>–ê–ö–ë –ø–ª–∞–Ω        -- {akbplan}</i>
<i>–ê–ö–ë —Ñ–∞–∫—Ç        -- {akbfact}</i>
<i>–ê–ö–ë –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö -- {akbpercent}%</i>

"""
        await message.answer(answer, reply_markup=menu)
        await state.finish()
    else:
        await message.reply("‚ùå <i>"+deoBlade+ "</i> \n<b>–í–≤–æ–¥–∏—Ç—å –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!! \n\n –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ:</b>")


