from aiogram import types
from filters import IsPrivate
from loader import dp,bot
from aiogram.dispatcher.filters import Command
from data.config import ADMINS
from aiogram.dispatcher import FSMContext
 
from aiogram.dispatcher.filters.state import State
from states.contactWithAdminState import contactAdmin
from keyboards.default.returnMenu import menuReturn
from keyboards.default.menuKeyboard import menu
from keyboards.default.menuKeyboardAdmin import menuAdmin
from data.config import ADMINS
# Echo bot
@dp.message_handler( text ="üë®üèΩ‚Äçüíª –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
async def getMyID(message: types.Message):
    await message.reply("""
‚ÄºÔ∏è–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞—è–≤–∫–∏:
                        
üñã –ñ–∞–ª–æ–±—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–∞–º–∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏
üñã –û–±—Ä–∞—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è –∫ —Å–∏—Å—Ç–µ–º–µ –ö.–ò.–¢.

üì¨–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è:
                        """, reply_markup=menuReturn)
    await contactAdmin.messageToAdmin.set()

@dp.message_handler(state = contactAdmin.messageToAdmin)
async def cencelReport(message: types.Message, state:FSMContext):

    messageToAdmin = f'<b>message from:</b> {message.from_user.id} @{message.from_user.username}   {message.from_user.full_name}:\n\n <b>Message:</b> {message.text}'
    if str(message.from_user.id) not in ADMINS:
            await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=menu)
    else:
            await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=menuAdmin)
    
    
    await bot.send_message(ADMINS[0],messageToAdmin)
    await state.finish()

@dp.message_handler(state = contactAdmin.messageToAdmin, content_types=types.ContentTypes.PHOTO)
async def cencelReport(message: types.Message, state:FSMContext):

    messageToAdmin = f'<b>message from:</b> {message.from_user.id} @{message.from_user.username}   {message.from_user.full_name}:\n\n <b>Message:</b> {message.text}'
    if str(message.from_user.id) not in ADMINS:
            await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=menu)
    else:
            await message.reply("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", reply_markup=menuAdmin)
    
    photos = message.photo

    
    photo = photos[0]

   
    file_id = photo.file_id
    await bot.send_photo(ADMINS[0], file_id,messageToAdmin)

    await state.finish()
