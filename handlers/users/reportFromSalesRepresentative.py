from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import CommandPrivacy
from aiogram.dispatcher.filters.state import State
from keyboards.default.menuReports import menuReports
from keyboards.default.menuKeyboard import menu
import zeep
from filters import IsPrivate, IsGroup
from datetime import datetime
from filters.private_chat import IsPrivate
from loader import dp, bot
from states.reportFromSalesRepresentativeStates import reportSR
from data.config import CHATS

@dp.message_handler(IsPrivate(),text='üìä –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç')
async def startGettingReport(message: types.Message):
   
    reasionsReturn = 'http://kit.gloriya.uz:5443/EVYAP_UT/EVYAP_UT.1cws?wsdl'
    client = zeep.Client(wsdl=reasionsReturn)
    try:
        user = client.service.GetUserByTelegramID(message.from_user.id)
    except:
        user = None
    
    if user:
        
   
        reasionsReturn = 'http://kit.gloriya.uz:5443/EVYAP_UT/EVYAP_UT.1cws?wsdl'
        client = zeep.Client(wsdl=reasionsReturn)
        
            
        telegramuser = client.service.GetUserByTelegramID(message.from_user.id)
        
        name  = telegramuser["Name"]
        
        userCode = telegramuser['Code']

        kpi = client.service.GetKPI(userCode)
        totalPlan = kpi["TotalPlan"]
        totalFact = kpi["TotalFact"]
        totalPercent = kpi["TotalPercent"]
        totalForecast = kpi["TotalForecast"]
        totalpercentForecast = kpi["TotalPercentForecastFact"]

        okbFull = kpi["OKB"]
        akbplan = kpi["AKBPlan"]
        akbfact = kpi["AKBFact"]
        akbpercent = kpi["AKBPercent"]

        #AKB

        reportData = client.service.GetDailyReport(userCode)
        biznesRegionlar = ""
        bizregionlarnomlari = ""

        for dict in reportData['BusinessRegionReportRow']:
            biznesRegionlar+="\n<i>"+dict['Name']+"  --  "+str(int(dict['AKB']))+"—Ç.—Ç.</i>"
            bizregionlarnomlari+=f'{dict["Name"], }'

        akbKotegory = ''
        for dict in reportData['AKBByCotegoriesRow']:
            akbKotegory+="\n<i>"+dict['Name']+"  --  "+str(int(dict['AKB']))+"—Ç.—Ç.</i>"
           

        okb = int(reportData["CountOKB"])
        akb = int(reportData["CountAKB"])
        if reportData['CountVisited']:
            countVisited = int(reportData['CountVisited'])
        else: 
            countVisited=0
        cash = reportData['Cash']
        transfer = reportData['Transfer']
        sum = reportData['Sum']
        
        if cash ==None:
            cash = 0
        if transfer == None:
            transfer = 0
        if sum==None:
            sum = 0


        answer =f"""
#dailyReport
#privateReport
#
üìÖ –î–∞—Ç–∞: {str(datetime.now().day)+'-'+str(datetime.now().month)+"-"+str(datetime.now().year)+"  "+str(datetime.now().hour)+':'+ str(datetime.now().minute)+':'+str(int(datetime.now().second))}
üôéüèª‚Äç‚ôÇÔ∏è –§–ò–û: {name}

<b>–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è</b> : {bizregionlarnomlari}<i></i> 

<b>–û–ö–ë –∏ –ê–ö–ë:</b>

<i>–û–ö–ë –ø–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ --  {okb} —Ç.—Ç.</i>
<i>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–µ—â–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ç–æ—á–µ–∫  --  {countVisited} —Ç.—Ç.</i>
<i>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã —Å–µ–≥–æ–¥–Ω—è  --  {akb} —Ç.—Ç.</i>


<b>–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ê–ö–ë –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:</b>
{biznesRegionlar}

<b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–æ–≤:</b>

<i>–ù–∞–ª–∏—á–Ω—ã–µ  --  {divide_and_split(cash)} –°—É–º</i>
<i>–ë–µ–∑–Ω–∞–ª–∏—á–∫–∞  --  {divide_and_split(transfer)} C—É–º</i>
<i>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤  --  {divide_and_split(sum)} C—É–º</i>

<b>–ê–ö–ë –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ç–æ–≤–∞—Ä–æ–≤:</b>
{
    akbKotegory
}


‚úø‚Ä¢‚îà‚îà‚îà‚îà‚Ä¢‚Ä¢‡ß°‚ùÄ‡ß°‚Ä¢‚îà‚îà‚îà‚îà‚Ä¢‚úø

üìä <b>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω –∏ –æ–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ {str(datetime.now().day)+'-'+str(datetime.now().month)+"-"+str(datetime.now().year)+"  "+str(datetime.now().hour)+':'+ str(datetime.now().minute)+':'+str(int(datetime.now().second))}</b>

<b>–ü–ª–∞–Ω –∏ —Ñ–∞–∫—Ç:</b>

<i>–ü–ª–∞–Ω  --  {divide_and_split(round(totalPlan,2))} C—É–º</i>
<i>–§–∞–∫—Ç  --  {divide_and_split(round(totalFact,2))} C—É–º</i>
<i>–§–∞–∫—Ç –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö  --  {round(totalPercent,2)}%</i>
<i>–ü—Ä–æ–≥–Ω–æ–∑  --  {divide_and_split(round(totalForecast,2))} C—É–º</i>
<i>–ü—Ä–æ–≥–Ω–æ–∑ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö  --  {round(totalpercentForecast,2)}%</i>

<b>–û–ö–ë –∏ –ê–ö–ë:</b>

<i>–û–ö–ë  --  {okbFull} —Ç.—Ç.</i>
<i>–ê–ö–ë –ø–ª–∞–Ω  --  {akbplan} —Ç.—Ç.</i>
<i>–ê–ö–ë —Ñ–∞–∫—Ç  --  {akbfact } —Ç.—Ç.</i>
<i>–ê–ö–ë –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö --  {round(akbpercent,2)}%</i>

"""
        if IsPrivate():
           chat =await bot.get_chat(-1001910673296)
           
           if chat.username:
               await message.answer(f'–í–∞—à –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É "{chat.title} @{chat.username}".\n\n {answer}')
           else:    
                await message.answer(f'–í–∞—à –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É "{chat.title}".\n\n {answer}')
                await message.answer("–ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤–∞—à–∏ –æ—Ç—á–µ—Ç—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ—Ç—á–µ—Ç –≤ —Å–≤–æ–µ–π –≥—Ä—É–ø–ø–µ —Å –ø–æ–º–æ—â—å—é –±–æ—Ç–∞")
           
           await bot.send_message(chat_id=-1001910673296, message_thread_id=2,text=answer, reply_markup=menu)
        
    else:
        # await message.reply_photo(photo="https://drive.google.com/file/d/1sa7LwhCITfX9CRpyYh6ZnMm1ixRgJxah/view?usp=sharing", caption='test')
        await message.reply("‚ÄºÔ∏è –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç: \n\n 1Ô∏è‚É£ –í—ã –Ω–µ —Ç–æ—Ä–≥–æ–≤—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å \n\n 2Ô∏è‚É£ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ")

       
def divide_and_split(number):
  """
  –†–∞–∑–¥–µ–ª—è–µ—Ç –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –Ω–∞ 3 —Å –ø—Ä–æ–±–µ–ª–∞–º–∏.

  Args:
    number: –ß–∏—Å–ª–æ.

  Returns:
    –°—Ç—Ä–æ–∫–∞ —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º.
  """

  number_str = str(number)
  number_strlist = number_str.split(".")
  number_str1 = number_strlist[0][::-1]
  number_str2 = number_strlist[1]

  numbers = []
  for i in range(0, len(number_str1), 3):
    numbers.append(number_str1[i:i + 3])
  numbersRevorse = []
  
  for i in range(len(numbers)-1,-1,-1):
    numbersRevorse.append(numbers[i][::-1])
  
  final =  " ".join(numbersRevorse)
  final+="."+number_str2
  return final